Om e-mails te versturen via Microsoft 365 SMTP met OAuth 2.0 in een Python-omgeving, heb je een setup nodig die:
	1.	OAuth 2.0 tokens kan ophalen van Microsoft (via MSAL of Requests)
	2.	Een access token gebruikt voor authenticatie met smtp.office365.com
	3.	E-mail verstuurt met smtplib en OAuth2

⸻

Hier is een volledige en actuele prompt (script) waarmee je dit correct opzet in Python:

⸻

Stap 1 – Installeer de vereisten

pip install msal



⸻

Stap 2 – Registreer je applicatie bij Azure
	1.	Ga naar https://portal.azure.com
	2.	Navigeer naar Azure Active Directory > App registrations
	3.	Klik op “New registration”
	4.	Kies een naam, en stel http://localhost in als redirect URI (voor desktop)
	5.	Na registratie:
	•	Noteer je Application (client) ID
	•	Noteer je Directory (tenant) ID
	6.	Ga naar Certificates & secrets, en voeg een Client Secret toe
	7.	Onder API Permissions:
	•	Voeg toe: SMTP.Send (via Microsoft Graph)
	•	Voeg toe: offline_access en openid
	•	Klik op “Grant admin consent”

⸻

Stap 3 – Python-script met OAuth2 SMTP-authenticatie

import base64
import smtplib
from msal import ConfidentialClientApplication

# ==== VUL DEZE IN MET JOUW GEGEVENS ====
CLIENT_ID = 'jouw-client-id'
CLIENT_SECRET = 'jouw-client-secret'
TENANT_ID = 'jouw-tenant-id'
EMAIL_ACCOUNT = 'danny.v@nexonsolutions.be'

# Microsoft login authority en scope
AUTHORITY = f'https://login.microsoftonline.com/{TENANT_ID}'
SCOPE = ['https://outlook.office365.com/.default']  # Voor SMTP

# Token ophalen via MSAL
app = ConfidentialClientApplication(
    client_id=CLIENT_ID,
    client_credential=CLIENT_SECRET,
    authority=AUTHORITY
)

result = app.acquire_token_silent(SCOPE, account=None)

if not result:
    result = app.acquire_token_for_client(scopes=SCOPE)

if 'access_token' not in result:
    raise Exception('Token ophalen mislukt: ' + str(result.get('error_description')))

access_token = result['access_token']

# Access token formatteren voor SMTP
auth_string = f"user={EMAIL_ACCOUNT}\x01auth=Bearer {access_token}\x01\x01"
auth_bytes = base64.b64encode(auth_string.encode())

# E-mail verzenden via SMTP + OAuth2
smtp_server = "smtp.office365.com"
smtp_port = 587

from_email = EMAIL_ACCOUNT
to_email = "ontvanger@example.com"
subject = "Testmail via OAuth2"
body = "Dit is een testmail verzonden met OAuth2-authenticatie via SMTP."

email_message = f"From: {from_email}\r\nTo: {to_email}\r\nSubject: {subject}\r\n\r\n{body}"

with smtplib.SMTP(smtp_server, smtp_port) as server:
    server.starttls()
    server.ehlo()
    server.docmd('AUTH', 'XOAUTH2 ' + auth_bytes.decode())
    server.sendmail(from_email, to_email, email_message)

print("E-mail succesvol verzonden.")



⸻

Opmerkingen
	•	Dit script gebruikt de client credentials flow (server-2-server, zonder gebruikersinteractie).
	•	Dit vereist dat het account waarmee je verzendt toestemming heeft om SMTP te gebruiken.
	•	Gebruik SMTP.Send-rechten via Graph API, niet de oude Exchange-permissies.

⸻

Wil je ook het voorbeeld voor gebruikersauthenticatie (met redirect URI + refresh token), of mag het bij deze machine-to-machine setup blijven?