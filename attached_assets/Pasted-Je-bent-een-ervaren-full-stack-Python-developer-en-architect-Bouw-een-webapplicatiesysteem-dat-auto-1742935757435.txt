Je bent een ervaren full-stack Python developer en architect. Bouw een webapplicatiesysteem dat automatisch documenten verwerkt – met name facturen, bonnen en bankafschriften – en relevante klant- en transactiegegevens extraheert en koppelt in een interne database. Het systeem moet zowel digitale PDF’s als gescande documenten (afbeeldingen) ondersteunen en werken in een achtergrondproces, zodat gebruikers na upload direct een bevestiging krijgen en het verwerken asynchroon plaatsvindt. Houd rekening met de volgende eisen en implementeer een goed gestructureerde, modulaire codebase met duidelijke commentaren en type hints:

Documentinvoer & Webinterface:

Implementeer een web-API (bijv. met Django of FastAPI) met een endpoint /upload waar gebruikers documenten (PDF’s en afbeeldingen) kunnen uploaden.

Na upload plaatst de API de documenten in een taakwachtrij (gebruik Celery met bijvoorbeeld Redis of RabbitMQ) zodat de verwerking op de achtergrond gebeurt.

Tekst Extractie:

Gebruik PyMuPDF om in digitale PDF’s direct de tekst te extraheren.

Controleer of de PDF een tekstlaag bevat; als dit niet het geval is (gescand document), converteer dan de pagina’s naar afbeeldingen en voer OCR uit met Tesseract (via pytesseract). Indien Tesseract faalt, maak gebruik van EasyOCR als fallback.

Indien de documenten tabellen bevatten (zoals bankafschriften), overweeg dan het gebruik van Camelot of pdfplumber voor het extraheren van gestructureerde tabeldata.

Entiteiten Extractie en NLP:

Analyseer de verkregen tekst om relevante klantgegevens te extraheren: klantnaam, adres, BTW-nummer en bankrekening (IBAN). Gebruik hiervoor reguliere expressies en/of een NLP-bibliotheek zoals spaCy met een NER-model dat getraind is op factuurdata.

Extraheer tevens factuurnummer, factuurdatum en totaalbedrag uit facturen. Voeg validatiecontroles toe (bv. validatie van BTW-nummer en IBAN).

Klantidentificatie en Database-integratie:

Gebruik een relationele database (bijv. PostgreSQL) met een ORM (zoals Django ORM of SQLAlchemy).

Controleer of de klant al bestaat in de database (bij voorkeur op basis van een uniek veld zoals BTW-nummer of met fuzzy matching op naam als fallback). Als de klant niet bestaat, maak dan automatisch een nieuw klantrecord aan.

Koppel de factuur aan de juiste klant door een nieuwe factuur-entry aan te maken met een foreign key naar het klantrecord.

Bankafschriften en Transactiekoppeling:

Voor bankafschriften, verwerk de documenten om individuele transacties te extraheren (datum, bedrag, omschrijving).

Match automatisch binnen de database betalingen aan openstaande facturen op basis van overeenkomende bedragen, datums en eventueel referentienummers in de omschrijving.

Indien automatische matching niet eenduidig is, markeer deze transacties als “voor handmatige review”.

Betrouwbaarheid, Logging en Schaalbaarheid:

Zorg voor gedetailleerde logging en foutafhandeling binnen elke stap (OCR, tekstextractie, data validatie).

Maak de achtergrondtaken idempotent, zodat herhaalde verwerking van hetzelfde document geen dubbele klant- of factuurrecords oplevert.

Schaal het systeem horizontaal met meerdere Celery workers indien de documentstroom toeneemt.

Documentatie en Testing:

Zorg dat de code goed is gedocumenteerd met duidelijke commentaren over elke module en functie.

Voeg unit tests toe voor kritische onderdelen, zoals de OCR fallback, data-extractie en database matching.

Gebruik type hints en zorg voor een modulaire architectuur, zodat onderdelen zoals OCR, parsing, NLP en DB-integratie makkelijk verwisselbaar of uitbreidbaar zijn.