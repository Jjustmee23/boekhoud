#!/bin/bash
set -e

# ------------------------------------------------------------------------------
# Configurabele variabelen
# ------------------------------------------------------------------------------
PROJECT_DIR="/opt/mydockerapp"

# ------------------------------------------------------------------------------
# 1. Check of het script als root draait
# ------------------------------------------------------------------------------
if [ "$EUID" -ne 0 ]; then
    echo "Dit script moet als root of via sudo worden uitgevoerd."
    exit 1
fi

# ------------------------------------------------------------------------------
# 2. Oude Docker verwijderen + Docker CE + Compose v2 installeren
# ------------------------------------------------------------------------------
install_docker_official() {
    echo ">> [Docker] Stap 1: Oude Docker-pakketten verwijderen..."
    apt-get remove -y docker docker-engine docker.io containerd runc || true
    apt-get autoremove -y
    apt-get update

    echo ">> [Docker] Stap 2: Vereisten voor Docker-repo toevoegen..."
    apt-get install -y ca-certificates curl gnupg

    echo ">> [Docker] Stap 3: Docker GPG-sleutel en repo instellen..."
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg

    echo ">> [Docker] Stap 4: Docker-repository toevoegen (jammy stable)..."
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
      https://download.docker.com/linux/ubuntu \
      jammy stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    echo ">> [Docker] Stap 5: Docker CE + Compose-plugin installeren..."
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    echo ">> [Docker] Stap 6: Docker activeren en starten..."
    systemctl enable docker
    systemctl start docker
    if ! systemctl is-active --quiet docker; then
        echo "Fout: Docker-daemon kon niet worden gestart."
        exit 1
    fi
    echo ">> [Docker] Docker en Docker Compose v2 succesvol geïnstalleerd."
}

# ------------------------------------------------------------------------------
# 3. Installeer andere dependencies: Git, Nginx, Certbot, UFW
# ------------------------------------------------------------------------------
install_other_dependencies() {
    echo ">> Installeren van Git, Nginx, Certbot en UFW..."
    apt-get install -y git nginx certbot python3-certbot-nginx ufw

    echo ">> Certbot timer activeren (automatisch SSL-hernieuwing)..."
    systemctl enable certbot.timer
    systemctl start certbot.timer
}

# ------------------------------------------------------------------------------
# 4. Firewall configureren (UFW)
# ------------------------------------------------------------------------------
configure_firewall() {
    echo ">> UFW: Openen van SSH + Nginx (80/443) poorten..."
    ufw allow OpenSSH
    ufw allow 'Nginx Full'
    ufw --force enable
}

# ------------------------------------------------------------------------------
# 5. Vervang replit-links in Dockerfile (indien nodig)
# ------------------------------------------------------------------------------
replace_replit_links() {
    if [ -f "$PROJECT_DIR/Dockerfile" ]; then
        echo ">> Dockerfile gevonden in ${PROJECT_DIR}."
        read -p "Geef de vervangende URL op voor replit-links (bijv. jouw-domein.nl): " REPLACEMENT_URL
        sed -i "s|replit\.com|${REPLACEMENT_URL}|g" "$PROJECT_DIR/Dockerfile"
        echo ">> Alle verwijzingen naar replit zijn vervangen door ${REPLACEMENT_URL}."
    else
        echo ">> Geen Dockerfile gevonden in ${PROJECT_DIR}; replit-links overslaan."
    fi
}

# ------------------------------------------------------------------------------
# 6. Check of Gunicorn in de Dockerfile wordt geïnstalleerd
# ------------------------------------------------------------------------------
ensure_gunicorn_installed() {
    if [ -f "$PROJECT_DIR/Dockerfile" ]; then
        if ! grep -q "pip install gunicorn" "$PROJECT_DIR/Dockerfile"; then
            echo ">> Gunicorn ontbreekt; we voegen dit toe aan de Dockerfile..."
            if grep -q "pip install -r requirements.txt" "$PROJECT_DIR/Dockerfile"; then
                sed -i '/pip install -r requirements.txt/a RUN pip install gunicorn' "$PROJECT_DIR/Dockerfile"
                echo ">> RUN pip install gunicorn is toegevoegd na pip install -r requirements.txt."
            else
                sed -i '/collectstatic --noinput/i RUN pip install gunicorn' "$PROJECT_DIR/Dockerfile"
                echo ">> RUN pip install gunicorn is toegevoegd vóór collectstatic-commando."
            fi
        else
            echo ">> Gunicorn is al aanwezig in de Dockerfile."
        fi
    else
        echo ">> Geen Dockerfile gevonden, gunicorn-check niet mogelijk."
    fi
}

# ------------------------------------------------------------------------------
# 7. Functie om de standaard settings.py te maken (indien nodig)
# ------------------------------------------------------------------------------
create_default_settings() {
    SETTINGS_PATH="$PROJECT_DIR/django_project/settings.py"
    if [ -f "$SETTINGS_PATH" ]; then
        echo "Er bestaat al een settings.py, dus we doen niets."
    else
        echo "Geen settings.py gevonden. We plaatsen een standaard settings.py..."
        mkdir -p "$PROJECT_DIR/django_project"
        cat > "$SETTINGS_PATH" <<'EOF'
"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-4ju2n@$f9d0c=h)_g0lbb%k9&@rf(xa$d$g$&5ri$uf)*gev^4')
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = [".kinkshadows.com", "0.0.0.0", "localhost", "*"]
CSRF_TRUSTED_ORIGINS = [
    "https://kinkshadows.com",
    "https://www.kinkshadows.com",
    "https://*.kinkshadows.com",
]

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'kinkshadow',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'kinkshadow.middleware.BannedUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'kinkshadow.middleware.AnalyticsMiddleware',
]

if ("KINKSHADOWS_DEPLOYMENT" in os.environ):
    MIDDLEWARE.append('django.middleware.clickjacking.XFrameOptionsMiddleware')

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

import dj_database_url

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'kinkshadow',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'db',
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'disable',
        },
    }
}

SESSION_COOKIE_AGE = 1209600
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / "static"]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEBUG_FLAG = (os.getenv('DEBUG', 'True').lower() == 'true')
if DEBUG_FLAG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django_microsoft_auth.backends.microsoft.MicrosoftEmailBackend'
EMAIL_HOST = 'smtp.office365.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'your-email@outlook.com')
MICROSOFT_AUTH_CLIENT_ID = os.environ.get('MICROSOFT_CLIENT_ID')
MICROSOFT_AUTH_CLIENT_SECRET = os.environ.get('MICROSOFT_CLIENT_SECRET')
MICROSOFT_AUTH_LOGIN_TYPE = 'ma'
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER', 'your-email@outlook.com')
SERVER_EMAIL = os.environ.get('EMAIL_HOST_USER', 'your-email@outlook.com')

MOLLIE_API_KEY = os.environ.get('MOLLIE_API_KEY', '')

AUTH_USER_MODEL = 'kinkshadow.User'
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'kinkshadow:home'

JAZZMIN_SETTINGS = {
    "site_title": "KinkShadow Admin",
    "site_header": "KinkShadow",
    "site_brand": "KinkShadow",
    "welcome_sign": "Welcome to KinkShadow Admin",
    "show_sidebar": True,
    "navigation_expanded": True,
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "kinkshadow.UserProfile": "fas fa-id-card",
        "kinkshadow.Album": "fas fa-images",
        "kinkshadow.Media": "fas fa-photo-video",
    },
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-dark",
    "accent": "accent-primary",
    "navbar": "navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "darkly",
}
EOF
    fi
}

# ------------------------------------------------------------------------------
# 8. Functie: Gebruiker kiest of hij eigen settings.py uploadt, of default wil
# ------------------------------------------------------------------------------
ensure_settings() {
    SETTINGS_PATH="$PROJECT_DIR/django_project/settings.py"

    echo
    read -p "Wil je je eigen settings.py uploaden in $PROJECT_DIR/django_project/ (Y/n)? " upload_choice
    upload_choice=${upload_choice:-Y}

    if [[ "$upload_choice" =~ ^[Yy]$ ]]; then
        # De gebruiker kiest JA -> overslaan van direct default settings plaatsen
        echo "Je kunt nu je eigen settings.py uploaden naar: $SETTINGS_PATH"
        echo "(Bijv. via scp: scp ./mijn_settings.py root@server:$SETTINGS_PATH )"
        echo
        echo "Als je klaar bent met uploaden, druk Enter om verder te gaan."
        read -r

        if [ ! -f "$SETTINGS_PATH" ]; then
            echo "Geen settings.py gevonden in $SETTINGS_PATH."
            read -p "Typ 'default' om de standaard settings te gebruiken, of Enter als je nu geüpload hebt: " choice_again
            if [[ "$choice_again" == "default" ]]; then
                create_default_settings
            else
                if [ ! -f "$SETTINGS_PATH" ]; then
                    echo "Er is nog steeds geen custom settings.py. We maken nu de standaard settings."
                    create_default_settings
                else
                    echo "Custom settings.py gedetecteerd."
                fi
            fi
        else
            echo "Custom settings.py is aanwezig in $SETTINGS_PATH"
        fi
    else
        # Gebruiker kiest N -> maak de standaard settings.py
        create_default_settings
    fi
}

# ------------------------------------------------------------------------------
# 9. Setup de applicatie: repo klonen, docker-compose.yml genereren
# ------------------------------------------------------------------------------
setup_application() {
    read -p "Geef de GitHub repository URL (bv. https://github.com/jouwnaam/repository.git): " GITHUB_REPO
    read -p "Geef de naam van de PostgreSQL-database: " DB_NAME

    echo
    echo "Hoeveel Gunicorn workers wil je gebruiken? (vuistregel: (2 * CPU) + 1)"
    read -p "Bijv. 17 bij 8-core server: " WORKERS
    WORKERS=${WORKERS:-17}
    echo ">> We gebruiken $WORKERS Gunicorn workers."

    # Kloon of update
    if [ ! -d "$PROJECT_DIR" ]; then
        echo ">> Clonen van repo naar $PROJECT_DIR..."
        git clone "$GITHUB_REPO" "$PROJECT_DIR"
    else
        echo ">> Repo bestaat al in $PROJECT_DIR, we doen git pull..."
        cd "$PROJECT_DIR"
        git pull
    fi

    replace_replit_links
    ensure_gunicorn_installed
    ensure_settings  # <-- Belangrijk: hier roepen we de nieuwe logica aan

    echo ">> Genereren van docker-compose.yml..."
    cat > "$PROJECT_DIR/docker-compose.yml" <<EOL
# Haal eventueel 'version: "3.8"' weg als je Compose v2-waarschuwingen wilt vermijden

services:
  db:
    image: postgres:latest
    container_name: mydockerapp_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  web:
    build: .
    container_name: mydockerapp_web
    restart: always
    command: gunicorn django_project.wsgi:application --workers=${WORKERS} --bind 0.0.0.0:8000
    environment:
      DJANGO_SETTINGS_MODULE: django_project.settings
      DATABASE_URL: postgres://postgres:postgres@db:5432/${DB_NAME}?sslmode=disable
    ports:
      - "8000:8000"
    depends_on:
      - db

volumes:
  postgres_data:
EOL

    cd "$PROJECT_DIR"
    echo ">> Docker Compose: bouwen en containers starten..."
    docker compose up -d --build

    echo ">> Django-commando's: makemigrations, migrate, collectstatic..."
    docker compose exec web python manage.py makemigrations || echo "Makemigrations command failed."
    docker compose exec web python manage.py migrate --noinput || echo "Migrate command failed, voer handmatig uit indien nodig."
    docker compose exec web python manage.py collectstatic --noinput || echo "Collectstatic command failed, voer handmatig uit indien nodig."
}

# ------------------------------------------------------------------------------
# 10. Superuser aanmaken (pas op het eind)
# ------------------------------------------------------------------------------
create_superuser() {
    echo
    read -p "Wil je een Django superuser aanmaken? (Y/n): " create_su
    create_su=${create_su:-Y}
    if [[ "$create_su" =~ ^[Yy]$ ]]; then
        read -p "Geef superuser username: " su_username
        read -p "Geef superuser email: " su_email
        read -sp "Geef superuser wachtwoord: " su_password
        echo
        echo ">> Aanmaken superuser..."
        docker compose exec web python - <<EOF
from django.contrib.auth import get_user_model
User = get_user_model()
username = "$su_username"
email = "$su_email"
password = "$su_password"
if not User.objects.filter(username=username).exists():
    User.objects.create_superuser(username, email, password)
EOF
        echo ">> Superuser aangemaakt (als deze nog niet bestond)."
    fi
}

# ------------------------------------------------------------------------------
# 11. Configureer Nginx met multi-(sub)domein SSL via Certbot
# ------------------------------------------------------------------------------
configure_nginx_ssl() {
    echo "Geef je domein(en) op (spatie-gescheiden) bijv: boekhoud.midaweb.be www.boekhoud.midaweb.be"
    read -r DOMAINS
    read -p "Zijn dit correct A-record(s) naar deze server? (Y/n): " A_RECORD
    A_RECORD=${A_RECORD:-Y}
    read -p "Geef een geldig e-mailadres voor SSL-registratie (Let’s Encrypt): " CERT_EMAIL

    # Bouw server_name line + certbot -d argumenten
    server_name_line=""
    certbot_domains=""
    for domain in $DOMAINS; do
        server_name_line="$server_name_line $domain"
        certbot_domains="$certbot_domains -d $domain"
    done

    NGINX_CONF="/etc/nginx/sites-available/myapp.conf"
    echo ">> Creëren minimal HTTP-config in $NGINX_CONF voor: $server_name_line"
    cat > "$NGINX_CONF" <<EOL
server {
    listen 80;
    server_name$server_name_line;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /static/ {
        alias /opt/mydockerapp/staticfiles/;
    }
}
EOL

    rm -f /etc/nginx/sites-enabled/default
    ln -sf "$NGINX_CONF" /etc/nginx/sites-enabled/

    nginx -t && systemctl reload nginx

    if [[ "$A_RECORD" =~ ^[Yy]$ ]]; then
        echo ">> Certbot --nginx $certbot_domains"
        certbot --nginx $certbot_domains --non-interactive --agree-tos --email "$CERT_EMAIL"
        echo ">> Certbot is klaar. Controleer of HTTPS actief is."
    else
        echo ">> SSL niet aangevraagd: domein(en) is/zijn geen A-record(s)."
    fi

    echo ">> Nginx + SSL setup (multi-domein) voltooid."
}

# ------------------------------------------------------------------------------
# 12. Update-functie (voor code-updates en herbuild)
# ------------------------------------------------------------------------------
update_application() {
    if [ -d "$PROJECT_DIR" ]; then
        echo ">> Updaten van de applicatie..."
        cd "$PROJECT_DIR"
        git pull
        docker compose up -d --build
        docker compose exec web python manage.py makemigrations || echo "Makemigrations failed."
        docker compose exec web python manage.py migrate --noinput || echo "Migrate failed, voer handmatig uit indien nodig."
        docker compose exec web python manage.py collectstatic --noinput || echo "Collectstatic failed, voer handmatig uit indien nodig."
    else
        echo ">> $PROJECT_DIR bestaat niet. Voer eerst de initiële installatie uit."
    fi
}

# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------
if [ "$1" == "update" ]; then
    update_application
    create_superuser
    exit 0
fi

echo "=== (1) Install Docker + Docker Compose v2 ==="
install_docker_official

echo "=== (2) Installeer overige dependencies (Nginx, Certbot, enz.) ==="
install_other_dependencies

echo "=== (3) Firewall configureren (UFW) ==="
configure_firewall

echo "=== (4) Setup van de applicatie (repository klonen, docker-compose.yml) ==="
setup_application

echo "=== (5) Nginx + SSL configureren (multi-domein support) ==="
configure_nginx_ssl

echo "=== (6) Superuser aanmaken (optioneel) ==="
create_superuser

echo "=== KLAAR! ==="
echo "Gebruik voor updates: sudo ./setup_docker_site.sh update"