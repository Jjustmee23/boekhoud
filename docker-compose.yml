version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${PORT:-5000}:5000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-facturatie}
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Amsterdam
      - MOLLIE_ENABLE_TIMEOUT=60
      - MOLLIE_WEBHOOK_TIMEOUT=60
    volumes:
      - ./static/uploads:/app/static/uploads:rw
      - ./logs:/app/logs:rw
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  db:
    image: postgres:15-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-facturatie}
      - TZ=Europe/Amsterdam
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Optioneel: Monitoring met Prometheus en Grafana (verwijder de comments om te activeren)
  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - app-network
  #   restart: always
  
  # grafana:
  #   image: grafana/grafana:latest
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning/:/etc/grafana/provisioning/
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - app-network
  #   depends_on:
  #     - prometheus
  #   restart: always

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local