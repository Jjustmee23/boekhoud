version: '3.8'

services:
  app:
    build: .
    restart: always
    depends_on:
      - postgres
    env_file: .env
    volumes:
      - ./static/uploads:/app/static/uploads
      - ./logs:/app/logs
    networks:
      - app-network
    # Geen ports nodig omdat we een nginx-proxy gebruiken
    environment:
      - VIRTUAL_HOST=${DOMAIN}
      - VIRTUAL_PORT=5000
      - LETSENCRYPT_HOST=${DOMAIN}
      - LETSENCRYPT_EMAIL=${SSL_EMAIL}

  postgres:
    image: postgres:15
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}

  # Reverse proxy voor SSL en domein routing
  nginx-proxy:
    image: nginxproxy/nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - ./nginx/custom.conf:/etc/nginx/conf.d/custom.conf:ro
    networks:
      - app-network

  # Service voor SSL certificaten via Let's Encrypt
  acme-companion:
    image: nginxproxy/acme-companion
    restart: always
    depends_on:
      - nginx-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - acme:/etc/acme.sh
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
    networks:
      - app-network
    environment:
      - DEFAULT_EMAIL=${SSL_EMAIL}

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  certs:
  html:
  vhost:
  acme: